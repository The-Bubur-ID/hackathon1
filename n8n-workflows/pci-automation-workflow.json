{
  "nodes": [
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "chatgpt-4o-latest",
          "mode": "list",
          "cachedResultName": "CHATGPT-4O-LATEST"
        },
        "messages": {
          "values": [
            {
              "content": "You are a PCI DSS security expert specializing in Requirement 6 (Secure Development). Analyze the security finding and provide comprehensive remediation guidance.\n\nFor each finding, output EXACTLY this JSON structure (no markdown, no extra text):\n{\n  \"finding_id\": \"unique_id_based_on_input\",\n  \"severity\": \"critical|high|medium|low\",\n  \"pci_requirement\": \"6.x.x format\",\n  \"cwe_id\": \"from input\",\n  \"title\": \"clear title\",\n  \"description\": \"detailed vulnerability explanation\",\n  \"fix_suggestion\": \"specific code fix with examples\",\n  \"risk_score\": \"number 1-10\",\n  \"evidence\": {\n    \"scan_tool\": \"Snyk SAST\",\n    \"scan_date\": \"current_timestamp\",\n    \"repo\": \"repository_name\",\n    \"file\": \"affected_file_path\",\n    \"line\": \"line_number\"\n  }\n}",
              "role": "system"
            },
            {
              "content": "=Security Finding Analysis Request:\n\nFinding ID: {{$json.id}}\nTitle: {{$json.title}}\nSeverity: {{$json.severity}}\nDescription: {{$json.description}}\nAffected File: {{$json.affected_file}}:{{$json.line_number}}\nCWE: {{$json.cwe_id}}\nVulnerable Code: {{$json.vulnerable_code}}\nRepository: {{$json.repository}}\n\nPlease analyze this finding and map it to the appropriate PCI DSS Requirement 6 sub-requirement. Provide specific fix recommendations with code examples."
            }
          ]
        },
        "options": {}
      },
      "id": "1e9ff052-10b0-4cd3-9ca5-64e33085dcc4",
      "name": "AI Security Analysis1",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.4,
      "position": [
        -112,
        -256
      ],
      "credentials": {
        "openAiApi": {
          "id": "gIx8rFZ15HJjRa6F",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=INSERT INTO workflow_logs (workflow_name, execution_id, status, findings_processed, created_at) VALUES ('PCI Requirement 6 Automation', '{{ $execution.id }}', 'success', 1, NOW())",
        "options": {}
      },
      "id": "e9ce9801-555c-4bf1-abf7-6715496aa838",
      "name": "Log Workflow Execution",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        1760,
        -32
      ],
      "credentials": {
        "postgres": {
          "id": "hZiHMgh7gHutpXAI",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=INSERT INTO evidence_packages (finding_id, evidence_document, created_at) VALUES ('{{ $('Store Finding to Database').item.json.finding_id }}', '{{ $json.body.replace(/'/g, \"''\") }}', NOW())\n\nRETURNING *",
        "options": {}
      },
      "id": "8e2109fc-7923-4a5f-8040-85cb85201c9d",
      "name": "Store Evidence Package",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        1536,
        -32
      ],
      "credentials": {
        "postgres": {
          "id": "hZiHMgh7gHutpXAI",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.github.com/repos/The-Bubur-ID/hackathon1/issues",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/vnd.github+json"
            },
            {
              "name": "X-GitHub-Api-Version",
              "value": "2022-11-28"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"title\": \"[{{ $('Store Finding to Database').item.json.severity }}] - {{ $json.title }}\",\n  \"body\": \"## Security Vulnerability\\n\\n**Finding ID:** {{ $json.id }}\\n**PCI DSS Requirement:** 6.5.6\\n**Severity:** Medium(Risk Score: 5/10)\\n**CWE:** CWE-444\\n\\n### Vulnerability Description\\n {{ $json.description }}n\\n### Affected Code\\n- **File:** `-`\\n- **Line:** 0 \\n\\n### Recommended Fix\\n {{ String($json.fix_suggestion || \"\").replace(/\\\\/g, '\\\\\\\\')  // Escape backslashes first\n          .replace(/\"/g, '\\\\\"')     // Escape double quotes\n          .replace(/\\n/g, '\\\\n')    // Escape newlines\n          .replace(/\\r/g, '\\\\r')    // Escape carriage returns\n          .replace(/\\t/g, '\\\\t')  }}\\n\\n### Compliance Checklist\\n- [ ] Review security finding\\n- [ ] Implement recommended fix\\n- [ ] Test implementation\\n- [ ] Verify security scan passes\\n- [ ] Update documentation\\n- [ ] Mark as resolved\\n\\n### References\\n- **PCI DSS Requirement:** 6.5.6 \\n\\n---\\n*Auto-generated by DOKU PCI Compliance Automation*\",\n  \"labels\": [\"security\", \"pci-compliance\"]\n}",
        "options": {}
      },
      "id": "a6be49b8-2551-4864-a99f-488b0a456629",
      "name": "Create GitHub Issue",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1280,
        -32
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "sPQI06nof9em49E7",
          "name": "Snyk Header Auth account"
        },
        "httpBearerAuth": {
          "id": "B6rD6HJonOTMXjkH",
          "name": "Github Bearer Auth account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=INSERT INTO knowledge_simple (title, content, doc_type, keywords, source_type, created_at) VALUES ('{{ $json.title }}', '{{ $json.content }}', '{{ $json.doc_type }}', {{ $json.keywords_array }}, '{{ $json.source_type }}', NOW())\n\nRETURNING *",
        "options": {}
      },
      "id": "7f35ffbc-3a94-4e9f-b183-00151f8e1589",
      "name": "Store to Knowledge Base",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        832,
        -32
      ],
      "credentials": {
        "postgres": {
          "id": "hZiHMgh7gHutpXAI",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Store finding metadata to knowledge base for ChatBot learning\nconst allInputs = $input.all();\n\nconst results = allInputs.map(data => {\n\n  const finding = data.json;\n  \n  // Create searchable content\n  const searchText = `${finding.title} - ${finding.description} - Fix: ${finding.fix_suggestion}`;\n  \n  // Extract keywords for search\n  const keywords = searchText\n    .toLowerCase()\n    .replace(/[^a-z0-9\\s]/g, ' ')\n    .split(/\\s+/)\n    .filter(word => word.length > 2)\n    .filter((word, index, arr) => arr.indexOf(word) === index)\n    .slice(0, 15);\n  \n  const keywordArray = keywords.map(k => k.replace(/'/g, \"''\")).join(\"','\");\n  \n  return {\n    json: {\n      finding_id: finding.finding_id,\n      title: `Security Finding: ${finding.title}`,\n      content: searchText.replace(/'/g, \"''\"),\n      doc_type: 'evidence',\n      keywords_array: `ARRAY['${keywordArray}']`,\n      source_type: 'evidence_package',\n      severity: finding.severity,\n      pci_requirement: finding.pci_requirement,\n      cwe_id: finding.cwe_id,\n      repo: finding.repo_name,\n      file: finding.affected_file,\n      line: finding.line_number,\n      risk_score: finding.risk_score,\n      metadata_json: JSON.stringify({\n        severity: finding.severity,\n        pci_requirement: finding.pci_requirement,\n        cwe_id: finding.cwe_id,\n        repo: finding.repo_name,\n        file: finding.affected_file,\n        line: finding.line_number,\n        risk_score: finding.risk_score\n      })\n    }\n  };\n\n});\n\n// Return all processed results\nreturn results;"
      },
      "id": "32a544a1-a0cd-451f-b6c0-50280f4197e7",
      "name": "Prepare Knowledge Base Entry",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        608,
        -32
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=INSERT INTO findings (finding_id, repo_name, severity, title, description, fix_suggestion, affected_file, line_number, cwe_id, pci_requirement, risk_score, status, created_at) \nVALUES (\n  '{{ $json.finding_id }}', \n  '{{ $json.evidence.repo }}', \n  '{{ $json.severity }}', \n  '{{ $json.title.replace(/'/g, \"''\") }}', \n  '{{ $json.description.replace(/'/g, \"''\") }}', \n  '{{ $json.fix_suggestion.replace(/'/g, \"''\") }}', \n  '{{ $json.evidence.file }}', \n  {{ $json.evidence.line }}, \n  '{{ $json.cwe_id }}', \n  '{{ $json.pci_requirement }}', \n  {{ $json.risk_score }}, \n  'open', \n  NOW()\n)\n\nRETURNING *",
        "options": {}
      },
      "id": "3d14014d-10c8-4de1-ae24-e104ce361d2a",
      "name": "Store Finding to Database",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        400,
        -32
      ],
      "credentials": {
        "postgres": {
          "id": "hZiHMgh7gHutpXAI",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse AI response and format for database storage\n// Process ALL items from input array, not just the first one\nconst allInputs = $input.all();\n\n// Helper functions\nfunction getFix(cweId) {\n  const fixes = {\n    'CWE-89': 'Use parameterized queries: const query = \"SELECT * FROM payments WHERE user_id = ?\"; db.query(query, [userId]);',\n    'CWE-79': 'Encode output: const clean = DOMPurify.sanitize(userInput); res.send(`<h1>Error: ${clean}</h1>`);',\n    'CWE-338': 'Use crypto.randomBytes(): const crypto = require(\"crypto\"); const token = crypto.randomBytes(32).toString(\"hex\");'\n  };\n  return fixes[cweId] || 'Review code for security best practices and apply appropriate fixes.';\n}\n\nfunction getRiskScore(severity) {\n  const scores = { critical: 9, high: 7, medium: 5, low: 3 };\n  return scores[severity] || 5;\n}\n\n// Process each input item\nconst results = allInputs.map(input => {\n  const response = input.json;\n  // AI node output can be in different formats\n  const aiContent = response.output || response.text || response.response || '';\n\n  let analysisResult;\n  try {\n    // Try to parse JSON from AI response\n    // Remove markdown code blocks if present\n    const cleanContent = aiContent.replace(/```json\\n?/g, '').replace(/```\\n?/g, '').trim();\n    analysisResult = JSON.parse(cleanContent);\n  } catch (error) {\n    // If JSON parsing fails, extract information manually\n    console.log('AI response is not valid JSON, extracting manually...');\n    \n    const tmpJson = input.json;\n    const originalFinding = JSON.parse(tmpJson.message.content)\n    console.log(originalFinding)\n    \n    // Map severity to PCI requirement\n    let pciRequirement;\n    if (originalFinding.cwe_id === 'CWE-89') {\n      pciRequirement = '6.5.1'; // SQL Injection\n    } else if (originalFinding.cwe_id === 'CWE-79') {\n      pciRequirement = '6.5.7'; // XSS\n    } else if (originalFinding.cwe_id === 'CWE-338') {\n      pciRequirement = '6.5.3'; // Insecure cryptographic storage\n    } else {\n      pciRequirement = '6.5.6'; // Other high/critical vulnerabilities\n    }\n    \n    // Create structured result\n    analysisResult = {\n      finding_id: `PCI-${Date.now()}-${Math.random().toString(36).substr(2, 5)}`,\n      severity: originalFinding.severity,\n      pci_requirement: pciRequirement,\n      cwe_id: originalFinding.cwe_id,\n      title: originalFinding.title,\n      description: originalFinding.description,\n      fix_suggestion: getFix(originalFinding.cwe_id),\n      risk_score: getRiskScore(originalFinding.severity),\n      evidence: {\n        scan_tool: 'Snyk Code',\n        scan_date: new Date().toISOString(),\n        repo: originalFinding.evidence.repo,\n        file: originalFinding.evidence.file,\n        line: originalFinding.evidence.line\n      }\n    };\n  }\n\n  // Generate evidence package markdown\n  const evidenceDocument = `# Security Finding Evidence Package\\n\\n**Finding ID:** ${analysisResult.finding_id}\\n**Severity:** ${analysisResult.severity}\\n**PCI DSS Requirement:** ${analysisResult.pci_requirement}\\n**Risk Score:** ${analysisResult.risk_score}/10\\n\\n## Vulnerability Details\\n- **Repository:** ${analysisResult.evidence.repo}\\n- **File:** ${analysisResult.evidence.file}:${analysisResult.evidence.line}\\n- **CWE:** ${analysisResult.cwe_id}\\n- **Scan Tool:** ${analysisResult.evidence.scan_tool}\\n- **Discovery Date:** ${analysisResult.evidence.scan_date}\\n\\n## Description\\n${analysisResult.description}\\n\\n## Recommended Fix\\n\\`\\`\\`\\n${analysisResult.fix_suggestion}\\n\\`\\`\\`\\n\\n## Compliance Impact\\nThis vulnerability affects PCI DSS ${analysisResult.pci_requirement} compliance and must be addressed according to risk-based prioritization.\\n\\n---\\n*Generated by DOKU PCI Compliance Automation*\\n*Timestamp: ${new Date().toISOString()}*`;\n\n  // Return formatted result for this item\n  return {\n    json: {\n      ...analysisResult,\n      evidence_document: evidenceDocument\n    }\n  };\n});\n\n// Return all processed results\nreturn results;"
      },
      "id": "48b4fd7e-1a1f-42ca-bc24-5cc11d7194c7",
      "name": "Format Analysis Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        176,
        -32
      ]
    },
    {
      "parameters": {
        "jsCode": "// Parse Snyk API response and format for processing\nconst snykResponse = $input.first().json;\n\nconst arrayIssue = JSON.parse(snykResponse.data);\nconsole.log(arrayIssue.data)\n// if (!arrayIssue || !Array.isArray(arrayIssue)) {\n//   console.log('No issues found or invalid response from Snyk');\n//   return [];\n// }\n\n// Transform Snyk issues to our internal format\nconst findings = arrayIssue.data\n  .filter(issue => issue.attributes?.status === 'open')\n  .slice(0, 10) // Limit to 10 issues per run\n  .map(issue => {\n    const attrs = issue.attributes || {};\n    const problems = attrs.problems || [];\n    const firstProblem = problems[0] || {};\n    \n    // Map Snyk severity to our format\n    const severityMap = {\n      'critical': 'critical',\n      'high': 'high',\n      'medium': 'medium',\n      'low': 'low'\n    };\n    \n    return {\n      id: issue.id || `SNYK-${Date.now()}`,\n      title: attrs.title || 'Security Issue',\n      severity: severityMap[attrs.severity] || 'medium',\n      description: attrs.description || 'Security vulnerability detected by Snyk',\n      affected_file: firstProblem.source?.file_path || 'unknown',\n      line_number: firstProblem.source?.start_line || 0,\n      cwe_id: attrs.classes?.map(c => c.id).find(id => id?.startsWith('CWE-')) || 'CWE-unknown',\n      package_name: attrs.key || 'unknown',\n      vulnerable_code: firstProblem.source?.code || '',\n      snyk_url: `https://app.snyk.io/org/${attrs.organization_id}/project/${attrs.project_id}`,\n      repository: attrs.project_name || 'unknown-repo',\n      scan_date: new Date().toISOString(),\n      scan_tool: 'Snyk Code'\n    };\n  });\n\nif (findings.length === 0) {\n  console.log('No open issues to process');\n  return [];\n}\n\nreturn findings.map(finding => ({ json: finding }));"
      },
      "id": "007d41ee-f5a7-4190-af92-8c1f4983643c",
      "name": "Parse Snyk Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -272,
        -32
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "url": "=https://api.snyk.io/rest/groups/8fd0a32f-d1a9-4df5-bc45-7920d26a73f7/issues?version=2024-10-15",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/vnd.api+json"
            }
          ]
        },
        "options": {}
      },
      "id": "9a4d10de-5e1f-44a0-b2cf-6ac510860a0f",
      "name": "Get Snyk Code Issues",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -480,
        -32
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "sPQI06nof9em49E7",
          "name": "Snyk Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 9
            }
          ]
        }
      },
      "id": "71732097-5b85-4610-b55b-3dfd12a4707b",
      "name": "Weekly Security Scan",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [
        -704,
        -32
      ]
    },
    {
      "parameters": {
        "jsCode": "// Parse each item's content field\nconst items = $input.all();\n\nreturn items.map(item => {\n  const content = item.json.content || '';\n  \n  // Extract parts from content (adjust regex based on actual pattern)\n  const titleMatch = content.match(/^(.*?)\\s-\\s/);\n  const fixMatch = content.match(/Fix:\\s*(.*)$/);\n  \n  return {\n    json: {\n      ...item.json,\n      vulnerability_type: titleMatch ? titleMatch[1] : 'Unknown',\n      description: content.split(' - ')[1] || content,\n      fix_suggestion: fixMatch ? fixMatch[1] : 'Review code for security best practices',\n      severity: 'MEDIUM' // You'll need to determine this from somewhere\n    }\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1040,
        -32
      ],
      "id": "77317654-a444-47e7-b005-1744c2180cfe",
      "name": "Code in JavaScript"
    }
  ],
  "connections": {
    "AI Security Analysis1": {
      "main": [
        [
          {
            "node": "Format Analysis Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Evidence Package": {
      "main": [
        [
          {
            "node": "Log Workflow Execution",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create GitHub Issue": {
      "main": [
        [
          {
            "node": "Store Evidence Package",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store to Knowledge Base": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Knowledge Base Entry": {
      "main": [
        [
          {
            "node": "Store to Knowledge Base",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Finding to Database": {
      "main": [
        [
          {
            "node": "Prepare Knowledge Base Entry",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Analysis Results": {
      "main": [
        [
          {
            "node": "Store Finding to Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Snyk Response": {
      "main": [
        [
          {
            "node": "AI Security Analysis1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Snyk Code Issues": {
      "main": [
        [
          {
            "node": "Parse Snyk Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Weekly Security Scan": {
      "main": [
        [
          {
            "node": "Get Snyk Code Issues",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Create GitHub Issue",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "fdde8e546dde0dc1fa7c0850190ff14589a25896ee7f167548c6198c470f624b"
  }
}
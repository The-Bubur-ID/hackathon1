{
  "nodes": [
    {
      "parameters": {},
      "id": "c7eb1a9b-767b-4e51-b06e-01a3be3bf2ba",
      "name": "Postgres Chat Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        1568,
        448
      ],
      "credentials": {
        "postgres": {
          "id": "hZiHMgh7gHutpXAI",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "id": "4ccff4f0-e6cf-4f1c-8b42-f604bc1c2bc7",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1472,
        0
      ],
      "credentials": {
        "openAiApi": {
          "id": "1l34Ckax0oYA9U8v",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO chatbot_queries (\n  user_query, bot_response, sources_used, confidence_score, response_time_ms\n) VALUES (\n  $1, $2, $3, $4, $5\n) RETURNING id;",
        "options": {
          "queryReplacement": "={{ $json.user_query_sql }},={{ $json.answer_sql }},={{ JSON.stringify($json.sources || []) }},={{ 0.85 }},={{ $json.response_time_sql }}"
        }
      },
      "id": "aa90684f-cd3f-40fc-9c25-6056c11ae508",
      "name": "Log Chat Interaction",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        2384,
        192
      ],
      "credentials": {
        "postgres": {
          "id": "hZiHMgh7gHutpXAI",
          "name": "Postgres account"
        }
      },
      "disabled": true,
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "const payload = $json;\nconst startItem = $items('Validate Chat Message', 0, 0)[0];\nconst startedAt = startItem ? new Date(startItem.json.timestamp) : new Date();\nconst responseTime = Date.now() - startedAt.getTime();\nconst escapeSql = (value) => (value || '').replace(/'/g, \"''\");\nreturn {\n  answer: payload.answer,\n  sources: payload.sources,\n  user_query: payload.user_query,\n  session_id: payload.session_id,\n  user_id: payload.user_id,\n  context_count: payload.context_count,\n  timestamp: payload.timestamp,\n  response_time_ms: responseTime,\n  user_query_sql: escapeSql(payload.user_query),\n  answer_sql: escapeSql(payload.answer),\n  sources_sql: JSON.stringify(payload.sources || []),\n  context_count_sql: payload.context_count || 0,\n  response_time_sql: responseTime\n};"
      },
      "id": "8c3de360-3702-4252-a31f-f045066db5fd",
      "name": "Prepare Chat Log",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2160,
        192
      ],
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "const agentOutput = $json.output || $json.result || $json.answer || '';\nconst answer = agentOutput || 'I do not have enough information to answer right now.';\nconst rawContext = $items('Prepare Agent Input', 0, 0)[0]?.json || {};\nconst kbMatches = [...answer.matchAll(/\\[KB-(\\d+)\\]/g)].map(match => `KB-${match[1]}`);\nconst findingMatches = [...answer.matchAll(/\\[FINDING-(\\d+)\\]/g)].map(match => `FINDING-${match[1]}`);\nconst statusMatches = [...answer.matchAll(/\\[STATUS-(\\d+)\\]/g)].map(match => `STATUS-${match[1]}`);\nconst referenced = new Set([...kbMatches, ...findingMatches, ...statusMatches]);\nconst sources = Array.from(referenced.values());\nreturn {\n  answer,\n  sources,\n  user_query: rawContext.user_query,\n  session_id: rawContext.session_id,\n  user_id: rawContext.user_id,\n  context_count: rawContext.context_count || 0,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "e0e8104d-d0c0-4125-b6d3-a766d3fa1220",
      "name": "Format Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1856,
        192
      ],
      "disabled": true
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "=You are a PCI DSS compliance expert assistant.\n\n# CONTEXT FROM DATABASE:\n{{ $json.compiled_context }}\n\n---\n\n# INSTRUCTIONS:\n1. Answer the user's SPECIFIC question using ONLY the context above\n2. Always cite sources using [KB-1], [FINDING-2], etc.\n3. If the context doesn't contain relevant information, say: \"I don't have specific information about that in my knowledge base.\"\n4. Be direct, specific, and actionable\n5. Focus on answering what the user actually asked\n6. Use technical accuracy - this is for security professionals\n7. Don't provide generic summaries unless specifically asked\n\n# IMPORTANT:\n- Answer the question directly and specifically\n- Don't start with \"You have not provided a specific question\"\n- The user's question is clear - answer it using the context\n- If context is empty or not relevant, say so clearly"
        }
      },
      "id": "c7f27530-b8f4-48ad-920a-c57ff7cea7af",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1472,
        192
      ]
    },
    {
      "parameters": {
        "jsCode": "const data = $json;\n            const kbList = (data.kb_results || []).map((r, i) => `[KB-${i + 1}] ${r.title}\n${r.content}`);\n            const evidenceList = (data.evidence_results || []).map((r, i) => `[FINDING-${i + 1}] ${r.title} (${r.severity})\nStatus: ${r.status}\nPCI: ${r.pci_requirement}\nDescription: ${r.description}\nFix: ${r.fix_suggestion}`);\n            const statusList = (data.status_results || []).map((r, i) => `PCI ${r.pci_requirement}: ${r.total_findings} findings (Critical: ${r.critical_count}, Open: ${r.open_count})`);\n            const contextSections = [\n              kbList.length ? `# Knowledge Base\n${kbList.join('\\n\\n')}` : '',\n              evidenceList.length ? `# Security Findings\n${evidenceList.join('\\n\\n')}` : '',\n              statusList.length ? `# Compliance Status\n${statusList.join('\\n')}` : ''\n            ].filter(Boolean);\n            const compiledContext = contextSections.join('\\n\\n');\n            const contextText = compiledContext || 'No additional context available.';\n            const prompt = [\n              `User Question: ${data.user_query}`,\n              '',\n              'Relevant Context:',\n              contextText\n            ].join('\\n');\n            return {\n              user_query: data.user_query,\n              session_id: data.session_id,\n              user_id: data.user_id,\n              compiled_context: contextText,\n              context_count: data.total_context_items,\n              timestamp: data.timestamp,\n              chatInput: prompt\n            };"
      },
      "id": "38ad7caf-3ef4-4e23-b9b7-92c348931701",
      "name": "Prepare Agent Input",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1232,
        192
      ]
    },
    {
      "parameters": {
        "jsCode": "function safeGetNodeItems(nodeName) {\n  try {\n    return $items(nodeName, 0, 0).map(item => item.json);\n  } catch (error) {\n    return [];\n  }\n}\nconst base = $('Detect Data Needs').first().json;\nconst kbRows = safeGetNodeItems('Search Knowledge Base');\nconst evidenceRows = safeGetNodeItems('Search Evidence');\nconst statusRows = safeGetNodeItems('Get Compliance Status');\nconst kbResults = kbRows.map(row => ({\n  title: row.title,\n  content: row.content,\n  doc_type: row.doc_type,\n  source_type: row.source_type,\n  relevance: row.relevance ?? 0\n}));\nconst evidenceResults = evidenceRows.map(row => ({\n  finding_id: row.finding_id,\n  title: row.title,\n  severity: row.severity,\n  description: row.description,\n  fix_suggestion: row.fix_suggestion,\n  pci_requirement: row.pci_requirement,\n  status: row.status\n}));\nconst statusResults = statusRows.map(row => ({\n  pci_requirement: row.pci_requirement,\n  total_findings: row.total_findings,\n  critical_count: row.critical_count,\n  high_count: row.high_count,\n  open_count: row.open_count,\n  resolved_count: row.resolved_count\n}));\nreturn {\n  user_query: base.user_query,\n  session_id: base.session_id,\n  user_id: base.user_id,\n  timestamp: base.timestamp,\n  needs_kb: base.needs_kb,\n  needs_evidence: base.needs_evidence,\n  needs_status: base.needs_status,\n  kb_results: kbResults,\n  evidence_results: evidenceResults,\n  status_results: statusResults,\n  total_context_items: kbResults.length + evidenceResults.length + statusResults.length\n};"
      },
      "id": "bef79158-5874-4bf1-9d5e-3682afd6cde5",
      "name": "Merge All Context",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1008,
        192
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  COALESCE(f.pci_requirement, 'Unknown') as pci_requirement,\n  COUNT(*) as total_findings,\n  COUNT(CASE WHEN f.severity = 'critical' THEN 1 END) as critical_count,\n  COUNT(CASE WHEN f.severity = 'high' THEN 1 END) as high_count,\n  COUNT(CASE WHEN f.status = 'open' THEN 1 END) as open_count,\n  COUNT(CASE WHEN f.status = 'resolved' THEN 1 END) as resolved_count\nFROM findings f\nWHERE f.created_at >= NOW() - INTERVAL '30 days'\nGROUP BY f.pci_requirement\nORDER BY total_findings DESC;",
        "options": {}
      },
      "id": "f9506cc7-5a4d-4eea-9f7b-4f20db158e10",
      "name": "Get Compliance Status",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        544,
        400
      ],
      "credentials": {
        "postgres": {
          "id": "hZiHMgh7gHutpXAI",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  f.finding_id, f.title, f.severity, f.description, \n  f.fix_suggestion, f.pci_requirement, f.status\nFROM findings f\nWHERE \n  f.title ILIKE '%' || $1 || '%'\n  OR f.description ILIKE '%' || $1 || '%'\n  OR f.cwe_id ILIKE '%' || $1 || '%'\nORDER BY \n  CASE f.severity \n    WHEN 'critical' THEN 1\n    WHEN 'high' THEN 2\n    WHEN 'medium' THEN 3\n    ELSE 4\n  END,\n  f.created_at DESC\nLIMIT 5;",
        "options": {
          "queryReplacement": "={{ $json.user_query }}"
        }
      },
      "id": "91c15166-5a2a-4790-8bee-1681295951f9",
      "name": "Search Evidence",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        544,
        192
      ],
      "credentials": {
        "postgres": {
          "id": "hZiHMgh7gHutpXAI",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  title, content, doc_type, source_type,\n  ts_rank(to_tsvector('english', content), plainto_tsquery('english', $1)) AS relevance\nFROM knowledge_simple \nWHERE \n  to_tsvector('english', content) @@ plainto_tsquery('english', $1)\n  OR keywords && string_to_array(lower($1), ' ')\n  OR title ILIKE '%' || $1 || '%'\nORDER BY relevance DESC\nLIMIT 5;",
        "options": {
          "queryReplacement": "={{ $json.user_query }}"
        }
      },
      "id": "24a7233a-30fe-4c71-a3ca-85dbaaa706c2",
      "name": "Search Knowledge Base",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        560,
        -16
      ],
      "credentials": {
        "postgres": {
          "id": "hZiHMgh7gHutpXAI",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "loose"
          },
          "conditions": [
            {
              "id": "needs_status",
              "leftValue": "={{ $json.needs_status }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "true"
              }
            }
          ],
          "combineOperation": "any"
        },
        "options": {}
      },
      "id": "58668349-c6bf-4120-96ae-a7c83910ff6e",
      "name": "Need Status?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        320,
        304
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "loose"
          },
          "conditions": [
            {
              "id": "needs_evidence",
              "leftValue": "={{ $json.needs_evidence }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "true"
              }
            }
          ],
          "combineOperation": "any"
        },
        "options": {}
      },
      "id": "e071030c-e60e-4ad4-af0c-9072d35db888",
      "name": "Need Evidence?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        320,
        208
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "loose"
          },
          "conditions": [
            {
              "id": "needs_kb",
              "leftValue": "={{ $json.needs_kb }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "true"
              }
            }
          ],
          "combineOperation": "any"
        },
        "options": {}
      },
      "id": "cc04c929-1fdc-4176-a59d-cc5cd78dd2d8",
      "name": "Need KB?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        320,
        96
      ]
    },
    {
      "parameters": {
        "jsCode": "const query = $json.user_query || '';\nconst keywords = query.toLowerCase();\nlet needsKB = false;\nlet needsEvidence = false;\nlet needsStatus = false;\nif (keywords.match(/what|how|explain|tell|describe|policy|requirement|compliance|guideline/)) {\n  needsKB = true;\n}\nif (keywords.match(/finding|evidence|vulnerability|vuln|security issue|cve|cwe/)) {\n  needsEvidence = true;\n}\nif (keywords.match(/status|progress|open|resolved|critical|how many|summary/)) {\n  needsStatus = true;\n}\nif (!needsKB && !needsEvidence && !needsStatus) {\n  needsKB = true;\n}\nreturn {\n  user_query: $json.user_query,\n  session_id: $json.session_id,\n  user_id: $json.user_id,\n  timestamp: $json.timestamp,\n  needs_kb: needsKB,\n  needs_evidence: needsEvidence,\n  needs_status: needsStatus\n};"
      },
      "id": "d0d9dd4b-5cc2-4a0c-b238-d4ad4cdd8eee",
      "name": "Detect Data Needs",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        96,
        208
      ]
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nreturn items.map(item => {\n  const payload = item.json || {};\n  const message = (payload.chatInput || payload.text || payload.query || '').trim();\n  if (!message) {\n    throw new Error('Missing required chat message');\n  }\n  const sessionId = payload.sessionId || payload.session_id || `sess_${Date.now()}_${Math.random().toString(36).slice(2, 7)}`;\n  const userId = payload.userId || payload.user_id || payload.sender || 'anonymous';\n  return {\n    json: {\n      user_query: message,\n      session_id: sessionId,\n      user_id: userId,\n      timestamp: new Date().toISOString()\n    }\n  };\n});"
      },
      "id": "4010e993-f545-420f-ace3-bee197b6bcd1",
      "name": "Validate Chat Message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -128,
        208
      ]
    },
    {
      "parameters": {
        "public": true,
        "options": {}
      },
      "id": "f42e639b-d38f-4763-a369-5112613f4c8d",
      "name": "When Chat Message Received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        -336,
        208
      ],
      "webhookId": "compliance-chatbot"
    }
  ],
  "connections": {
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Chat Log": {
      "main": [
        [
          {
            "node": "Log Chat Interaction",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Response": {
      "main": [
        [
          {
            "node": "Prepare Chat Log",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Agent Input": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge All Context": {
      "main": [
        [
          {
            "node": "Prepare Agent Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Compliance Status": {
      "main": [
        [
          {
            "node": "Merge All Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Evidence": {
      "main": [
        [
          {
            "node": "Merge All Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Knowledge Base": {
      "main": [
        [
          {
            "node": "Merge All Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Need Status?": {
      "main": [
        [
          {
            "node": "Get Compliance Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Need Evidence?": {
      "main": [
        [
          {
            "node": "Search Evidence",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Need KB?": {
      "main": [
        [
          {
            "node": "Search Knowledge Base",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Detect Data Needs": {
      "main": [
        [
          {
            "node": "Need Status?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Need Evidence?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Need KB?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Chat Message": {
      "main": [
        [
          {
            "node": "Detect Data Needs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Chat Message Received": {
      "main": [
        [
          {
            "node": "Validate Chat Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "fdde8e546dde0dc1fa7c0850190ff14589a25896ee7f167548c6198c470f624b"
  }
}
{
  "meta": {
    "instanceId": "doku-compliance-poc"
  },
  "name": "Compliance ChatBot with RAG",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "chat",
        "responseMode": "responseNode",
        "options": {
          "noResponseBody": false
        }
      },
      "id": "webhook-trigger",
      "name": "ChatBot Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [
        240,
        300
      ],
      "webhookId": "compliance-chatbot"
    },
    {
      "parameters": {
        "jsCode": "// Validate and parse incoming ChatBot request\nconst body = $input.first().json.body;\n\nif (!body || !body.query) {\n  throw new Error('Missing required field: query');\n}\n\n// Extract and validate query parameters\nconst userQuery = body.query.trim();\nif (userQuery.length < 3) {\n  throw new Error('Query must be at least 3 characters long');\n}\n\nif (userQuery.length > 500) {\n  throw new Error('Query too long (max 500 characters)');\n}\n\n// Generate session ID if not provided\nconst sessionId = body.session_id || `sess_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`;\nconst userId = body.user_id || 'anonymous';\n\n// Log the request\nconsole.log(`ChatBot query from ${userId}: ${userQuery}`);\n\n// Return structured query data\nreturn {\n  user_query: userQuery,\n  user_id: userId,\n  session_id: sessionId,\n  timestamp: new Date().toISOString(),\n  query_length: userQuery.length\n};"
      },
      "id": "validate-request",
      "name": "Validate Request",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "model": "gpt-4o",
        "options": {
          "temperature": 0.2,
          "maxTokens": 1500
        },
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "You are a PCI DSS compliance assistant with access to internal security policies, compliance documentation, and security findings database.\n\nWhen answering questions:\n1. Always search the knowledge base first using the search_knowledge_base tool\n2. If asking about specific findings, use the get_evidence_package tool\n3. For compliance status queries, use the check_compliance_status tool\n4. Provide accurate, cited responses with source references\n5. If information is not available, clearly state so\n6. Focus on actionable compliance guidance\n\nAlways cite your sources using: [Source: document_name]\nFor database results, use: [Source: Security Findings Database]"
            },
            {
              "role": "user",
              "content": "={{\"User Question: \" + $json.user_query + \"\\n\\nPlease help me with this PCI DSS compliance question. Search the knowledge base and provide a comprehensive answer with sources.\"}}"
            }
          ]
        },
        "tools": [
          {
            "toolType": "function",
            "function": {
              "name": "search_knowledge_base",
              "description": "Search internal policies and compliance documentation using keyword search",
              "parameters": {
                "type": "object",
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "Search query for finding relevant documents"
                  },
                  "doc_type": {
                    "type": "string",
                    "enum": ["policy", "compliance_doc", "evidence", "all"],
                    "description": "Type of document to search (default: all)"
                  },
                  "top_k": {
                    "type": "number",
                    "description": "Number of results to return (default: 5, max: 10)"
                  }
                },
                "required": ["query"]
              }
            }
          },
          {
            "toolType": "function", 
            "function": {
              "name": "get_evidence_package",
              "description": "Retrieve specific evidence package for security finding by ID",
              "parameters": {
                "type": "object",
                "properties": {
                  "finding_id": {
                    "type": "string",
                    "description": "Finding ID (e.g., PCI-12345-abc) or search term"
                  }
                },
                "required": ["finding_id"]
              }
            }
          },
          {
            "toolType": "function",
            "function": {
              "name": "check_compliance_status",
              "description": "Query current status of findings and remediation progress",
              "parameters": {
                "type": "object",
                "properties": {
                  "pci_requirement": {
                    "type": "string",
                    "description": "PCI requirement number (e.g., '6.5.1') or 'all'"
                  },
                  "severity_filter": {
                    "type": "string",
                    "enum": ["critical", "high", "medium", "low", "all"],
                    "description": "Filter by severity (default: all)"
                  },
                  "status_filter": {
                    "type": "string",
                    "enum": ["open", "in_progress", "resolved", "verified", "all"],
                    "description": "Filter by status (default: all)"
                  }
                },
                "required": []
              }
            }
          }
        ]
      },
      "id": "ai-chatbot",
      "name": "AI ChatBot with RAG",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.4,
      "position": [
        680,
        300
      ],
      "credentials": {
        "openAiApi": {
          "id": "openai-credentials",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.tool_calls?.[0]?.function?.name}}",
              "operation": "equal",
              "value2": "search_knowledge_base"
            }
          ]
        }
      },
      "id": "is-search-tool",
      "name": "Is Search Tool?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        900,
        240
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.tool_calls?.[0]?.function?.name}}",
              "operation": "equal",
              "value2": "get_evidence_package"
            }
          ]
        }
      },
      "id": "is-evidence-tool",
      "name": "Is Evidence Tool?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1120,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.tool_calls?.[0]?.function?.name}}",
              "operation": "equal",
              "value2": "check_compliance_status"
            }
          ]
        }
      },
      "id": "is-compliance-tool",
      "name": "Is Compliance Tool?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1340,
        360
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=SELECT \n  title, content, doc_type, source_type,\n  ts_rank(to_tsvector('english', content), plainto_tsquery('english', $1)) AS relevance\nFROM knowledge_simple \nWHERE (\n  ($2 = 'all' OR doc_type = $2) AND\n  (\n    to_tsvector('english', content) @@ plainto_tsquery('english', $1)\n    OR keywords && string_to_array(lower($1), ' ')\n    OR title ILIKE '%' || $1 || '%'\n  )\n)\nORDER BY relevance DESC, created_at DESC\nLIMIT LEAST(COALESCE($3::int, 5), 10);",
        "additionalFields": {},
        "options": {}
      },
      "id": "search-knowledge-base",
      "name": "Search Knowledge Base", 
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        1120,
        200
      ],
      "credentials": {
        "postgres": {
          "id": "railway-postgres",
          "name": "Railway PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=SELECT \n  f.finding_id, f.title, f.severity, f.description, f.fix_suggestion,\n  f.affected_file, f.line_number, f.cwe_id, f.pci_requirement, f.status,\n  ep.evidence_document\nFROM findings f\nLEFT JOIN evidence_packages ep ON f.finding_id = ep.finding_id\nWHERE \n  f.finding_id ILIKE '%' || $1 || '%'\n  OR f.title ILIKE '%' || $1 || '%'\n  OR f.description ILIKE '%' || $1 || '%'\nORDER BY f.created_at DESC\nLIMIT 5;",
        "additionalFields": {},
        "options": {}
      },
      "id": "get-evidence-package",
      "name": "Get Evidence Package",
      "type": "n8n-nodes-base.postgres", 
      "typeVersion": 2.4,
      "position": [
        1120,
        300
      ],
      "credentials": {
        "postgres": {
          "id": "railway-postgres",
          "name": "Railway PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=SELECT \n  COALESCE(f.pci_requirement, 'Unknown') as pci_requirement,\n  COUNT(*) as total_findings,\n  COUNT(CASE WHEN f.severity = 'critical' THEN 1 END) as critical_count,\n  COUNT(CASE WHEN f.severity = 'high' THEN 1 END) as high_count,\n  COUNT(CASE WHEN f.severity = 'medium' THEN 1 END) as medium_count,\n  COUNT(CASE WHEN f.severity = 'low' THEN 1 END) as low_count,\n  COUNT(CASE WHEN f.status = 'open' THEN 1 END) as open_count,\n  COUNT(CASE WHEN f.status = 'resolved' THEN 1 END) as resolved_count,\n  COUNT(CASE WHEN f.status = 'verified' THEN 1 END) as verified_count\nFROM findings f\nWHERE \n  ($1 = 'all' OR f.pci_requirement = $1 OR f.pci_requirement ILIKE '%' || $1 || '%')\n  AND ($2 = 'all' OR f.severity = $2)\n  AND ($3 = 'all' OR f.status = $3)\n  AND f.created_at >= NOW() - INTERVAL '30 days'\nGROUP BY f.pci_requirement\nORDER BY total_findings DESC;",
        "additionalFields": {},
        "options": {}
      },
      "id": "check-compliance-status",
      "name": "Check Compliance Status",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        1120,
        400
      ],
      "credentials": {
        "postgres": {
          "id": "railway-postgres",
          "name": "Railway PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Format tool results and prepare for AI response\nconst toolCall = $input.first().json.tool_calls?.[0];\nconst toolName = toolCall?.function?.name;\nconst toolArgs = toolCall?.function?.arguments;\n\n// Get results from the appropriate database query\nlet toolResults = [];\nlet resultType = '';\n\n// Check which tool was called and format results accordingly\nif (toolName === 'search_knowledge_base') {\n  const dbResults = $input.all().filter(item => item.json.title !== undefined);\n  resultType = 'knowledge_search';\n  \n  toolResults = dbResults.map(item => ({\n    title: item.json.title,\n    content: item.json.content?.substring(0, 300) + '...', // Truncate for context\n    doc_type: item.json.doc_type,\n    source_type: item.json.source_type,\n    relevance: item.json.relevance || 0\n  }));\n  \n} else if (toolName === 'get_evidence_package') {\n  const dbResults = $input.all().filter(item => item.json.finding_id !== undefined);\n  resultType = 'evidence_search';\n  \n  toolResults = dbResults.map(item => ({\n    finding_id: item.json.finding_id,\n    title: item.json.title,\n    severity: item.json.severity,\n    description: item.json.description,\n    fix_suggestion: item.json.fix_suggestion,\n    affected_file: item.json.affected_file,\n    line_number: item.json.line_number,\n    cwe_id: item.json.cwe_id,\n    pci_requirement: item.json.pci_requirement,\n    status: item.json.status\n  }));\n  \n} else if (toolName === 'check_compliance_status') {\n  const dbResults = $input.all().filter(item => item.json.pci_requirement !== undefined);\n  resultType = 'compliance_status';\n  \n  toolResults = dbResults.map(item => ({\n    pci_requirement: item.json.pci_requirement,\n    total_findings: item.json.total_findings,\n    critical_count: item.json.critical_count,\n    high_count: item.json.high_count,\n    medium_count: item.json.medium_count,\n    low_count: item.json.low_count,\n    open_count: item.json.open_count,\n    resolved_count: item.json.resolved_count,\n    verified_count: item.json.verified_count\n  }));\n}\n\n// Prepare response data\nconst response = {\n  tool_name: toolName,\n  tool_arguments: toolArgs,\n  result_type: resultType,\n  results: toolResults,\n  result_count: toolResults.length,\n  search_query: toolArgs?.query || toolArgs?.finding_id || 'status_check'\n};\n\nconsole.log(`Tool ${toolName} returned ${toolResults.length} results`);\n\nreturn response;"
      },
      "id": "format-tool-results", 
      "name": "Format Tool Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1340,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Combine original AI response with tool results and format final response\nconst originalData = $input.first().json;\nconst aiResponse = originalData.response || 'I apologize, but I encountered an issue processing your request.';\nconst toolResults = originalData.results || [];\nconst resultType = originalData.result_type;\nconst searchQuery = originalData.search_query;\n\n// Calculate confidence score based on results\nlet confidenceScore = 0.5; // Default\nif (toolResults.length > 0) {\n  if (resultType === 'knowledge_search') {\n    // Higher confidence for knowledge base matches\n    const avgRelevance = toolResults.reduce((sum, r) => sum + (r.relevance || 0), 0) / toolResults.length;\n    confidenceScore = Math.min(0.95, 0.6 + (avgRelevance * 0.35));\n  } else if (resultType === 'evidence_search') {\n    // High confidence for direct evidence matches\n    confidenceScore = 0.9;\n  } else if (resultType === 'compliance_status') {\n    // High confidence for status data\n    confidenceScore = 0.95;\n  }\n}\n\n// Format sources for citation\nlet sources = [];\nif (toolResults.length > 0) {\n  if (resultType === 'knowledge_search') {\n    sources = toolResults.map((result, index) => ({\n      id: index + 1,\n      title: result.title,\n      type: result.doc_type,\n      source: result.source_type === 'manual' ? 'Internal Documentation' : 'Evidence Package',\n      relevance: parseFloat((result.relevance || 0).toFixed(3))\n    }));\n  } else if (resultType === 'evidence_search') {\n    sources = toolResults.map((result, index) => ({\n      id: index + 1,\n      title: `Finding: ${result.title}`,\n      type: 'security_finding',\n      source: 'Security Findings Database',\n      finding_id: result.finding_id,\n      severity: result.severity,\n      status: result.status\n    }));\n  } else if (resultType === 'compliance_status') {\n    sources = [{\n      id: 1,\n      title: 'Compliance Status Report',\n      type: 'compliance_data',\n      source: 'Security Findings Database',\n      data_range: 'Last 30 days'\n    }];\n  }\n}\n\n// Response time calculation (estimated)\nconst responseTime = 2000 + (toolResults.length * 100); // Base + per result\n\n// Final formatted response\nconst finalResponse = {\n  status: 'success',\n  answer: aiResponse,\n  sources: sources,\n  confidence: parseFloat(confidenceScore.toFixed(2)),\n  result_count: toolResults.length,\n  search_query: searchQuery,\n  response_time_ms: responseTime,\n  session_id: originalData.session_id || 'unknown',\n  timestamp: new Date().toISOString(),\n  user_id: originalData.user_id || 'anonymous'\n};\n\nreturn finalResponse;"
      },
      "id": "format-final-response",
      "name": "Format Final Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1560,
        300
      ]
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": "public",
        "table": "chatbot_queries",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "user_query": "={{$json.search_query}}",
            "bot_response": "={{$json.answer}}",
            "sources_used": "={{JSON.stringify($json.sources)}}",
            "confidence_score": "={{$json.confidence}}",
            "response_time_ms": "={{$json.response_time_ms}}"
          }
        }
      },
      "id": "log-query",
      "name": "Log ChatBot Query",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        1780,
        300
      ],
      "credentials": {
        "postgres": {
          "id": "railway-postgres", 
          "name": "Railway PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{$json}}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "Access-Control-Allow-Origin", 
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type, Authorization"
              }
            ]
          }
        }
      },
      "id": "webhook-response",
      "name": "Return Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        2000,
        300
      ]
    }
  ],
  "connections": {
    "ChatBot Webhook": {
      "main": [
        [
          {
            "node": "Validate Request",
            "type": "main", 
            "index": 0
          }
        ]
      ]
    },
    "Validate Request": {
      "main": [
        [
          {
            "node": "AI ChatBot with RAG",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI ChatBot with RAG": {
      "main": [
        [
          {
            "node": "Is Search Tool?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Search Tool?": {
      "main": [
        [
          {
            "node": "Search Knowledge Base",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Is Evidence Tool?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Evidence Tool?": {
      "main": [
        [
          {
            "node": "Get Evidence Package",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Is Compliance Tool?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Compliance Tool?": {
      "main": [
        [
          {
            "node": "Check Compliance Status",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Format Tool Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Knowledge Base": {
      "main": [
        [
          {
            "node": "Format Tool Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Evidence Package": {
      "main": [
        [
          {
            "node": "Format Tool Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Compliance Status": {
      "main": [
        [
          {
            "node": "Format Tool Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Tool Results": {
      "main": [
        [
          {
            "node": "Format Final Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Final Response": {
      "main": [
        [
          {
            "node": "Log ChatBot Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log ChatBot Query": {
      "main": [
        [
          {
            "node": "Return Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-10-25T10:00:00.000Z",
      "updatedAt": "2025-10-25T10:00:00.000Z", 
      "id": "pci-compliance",
      "name": "PCI Compliance"
    },
    {
      "createdAt": "2025-10-25T10:00:00.000Z",
      "updatedAt": "2025-10-25T10:00:00.000Z",
      "id": "chatbot",
      "name": "ChatBot"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-10-25T10:00:00.000Z",
  "versionId": "1"
}